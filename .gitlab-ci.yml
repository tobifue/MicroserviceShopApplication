


stages:
  - dockerBuild
  - integrationTest
  - release



docker:
  image: docker:latest
  tags:
    - swa
  stage: dockerBuild
  artifacts:
    name: "$CI_BUILD"
    paths:
      - client-quality_check.log
  services:
  - docker:dind 
  script:
    - apk add --no-cache docker-compose
    - apk add py3-pip
    - pip install --upgrade docker-compose
    - docker-compose --version
#    - COMPOSE_PROFILES=test docker-compose up
    - docker-compose build -q --parallel
    - COMPOSE_PROFILES=test docker-compose up &
    - apk add --update nodejs npm
    - npm install newman -g
    - newman run buy_from_shop.json

integration_test:  
  tags:
    - swa
  image: maven:3-openjdk-11
  stage: integrationTest
  artifacts:
     paths: 
       - deployment
  script:
    - ls
    - cd deployment
    - ls
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive 
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime 
    - echo $TZ > /etc/timezone
#install and run Java things here
    - apt -y install nodejs npm 
    - cd ../implementation/cart/container
    - npm start --host=app &
    - npm install -g mocha
    - npm install newman -g
    - npm install
    - npm run test



cart_testing:
  services:
    - name: node:latest
      alias: app
  image: node:latest
  stage: cartTest
  artifacts:
    paths:
      - implementation/cart/container/
  script:
    - cd implementation/cart/container
    - npm start --host=app &
    - npm install -g mocha
    - npm install
    - npm run test



release_upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: docker
  rules:
    - if: '$RELEASE == "True"'
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
#    - cd deployment
    - release-cli create --name="My Release" --description="My Release description" --tag-name job-$CI_JOB_ID 
      --assets-link "{\"name\":\"Microservices\",\"url\":\"https://git01lab.cs.univie.ac.at/vu-advanced-software-engineering/students/2021s/ASE_Team_0105/-/jobs/$JOB_ID/artifacts/download\"}"
