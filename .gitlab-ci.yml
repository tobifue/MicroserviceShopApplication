stages:
  - build
  - test
  - integrationTest
  - release
  - cleanup


integration_test_fast:
  before_script: 
    - export NO_PROXY="127.0.0.1"
  image: node:latest
  stage: build
  artifacts:
    paths:
      - implementation/cart/container/
  script:
    - cd implementation/cart/container
    - npm install -g mocha
    - npm install
    - npm run test

integration_test_connect:
  before_script: 
    - export NO_PROXY="127.0.0.1"
  image: node:latest
  stage: build
  artifacts:
    paths:
      - implementation/cart/container/
  script:


install_dependencies:
  image: node:latest
  stage: build
  script:
    - npm install
  artifacts:
    paths:
      - implementation/cart/container/node_modules/



cart_testing:
  services:
    - name: node:latest
      alias: app
  image: node:latest
  stage: test
  artifacts:
    paths:
      - implementation/cart/container/
  script:
    - cd implementation/cart/container
    - npm start --host=app &
    - npm install -g mocha
    - npm install
    - npm run test




integration_test:
  #add Java services
  image: docker:latest
  stage: integrationTest
  artifacts:
    paths:
      - implementation
  needs:
    - job: cart_testing
      artifacts: true
  script:   
    - cd implementation/cart/container 
    - ls
    - docker-compose build -t my-docker-image .
    - docker-compose run my-docker-image /script/to/run/tests
    - cd ../../test
    - npm install -g mocha
    - npm install
    - mocha endToEndTest.js --exit

release_upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: integration_test
      artifacts: true
  rules:
    - if: '$RELEASE == "True"'
    - if: '$CI_COMMIT_BRANCH == "master"'

  script:
    - release-cli create --name="My Release" --description="My Release description" --tag-name job-$CI_JOB_ID --ref $CI_COMMIT_SHA


cleanup:
  stage: cleanup
  when: always
  script:
    - docker rmi ${IMAGE} || true